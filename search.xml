<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CRYPTO密码学入门</title>
    <url>/CRYPTO%E5%AF%86%E7%A0%81%E5%AD%A6%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="0x01密码学概述"><a href="#0x01密码学概述" class="headerlink" title="0x01密码学概述"></a>0x01密码学概述</h1><p>  第一阶段从古代到19实际末——古典密码<br>  第二阶段从20实际初到1949年——近代密码<br>  第三阶段从C.E.Shannon (香浓)于1949年发表的划时代论文”The Communication Theory of Secret Systems”开始——现代密码<br>  第四阶段从1976年W.Diffie和M.Hellman创造性地发表了论文”New Directions in Cryptography”开始——公钥密码</p>
<h2 id="密码编码学"><a href="#密码编码学" class="headerlink" title="密码编码学"></a>密码编码学</h2><p>  密码编码学是密码学的一个分支，研究与信息安全有关的数学技术。<br>  密码编码学是包含数据变换的原理、工具和方法的一门学科，这种数据变换的目的是为了隐蔽数据的信息内容，阻止对数据的篡改以及防止未经认可使用数据<br>  密码编码学是论述使明文变得不可懂的密文，以及把已加密的消息变换成可懂的形式的艺术和技巧 </p>
<h2 id="对称加密不对称加密"><a href="#对称加密不对称加密" class="headerlink" title="对称加密不对称加密"></a>对称加密不对称加密</h2><p>  对称加密算法：加密密钥和解密密钥相同，或实质上相同，从一个易与推出另一个。又称传统密码算法、秘密密钥算法或单密钥算法<br>  DES、3DES、IDEA、AES<br>  非对称密码算法：加密密钥和解密密钥不同，从一个很难推出另一个。又叫公钥密码算法，其中的加密密钥可以公开，称为公开密钥，简称公钥，机密密钥必须保密，称为私人密钥，简称私钥<br>  RSA、ECC、EIGamal</p>
<h1 id="0x02常见编码"><a href="#0x02常见编码" class="headerlink" title="0x02常见编码"></a>0x02常见编码</h1><h2 id="ASCII编码"><a href="#ASCII编码" class="headerlink" title="ASCII编码"></a>ASCII编码</h2><p>  使用7位或8位二进制数组合表示128或256种可能的字符。<br>  <img src= "/img/loading.gif" data-src="2.png" alt=""><br>  <img src= "/img/loading.gif" data-src="3.png" alt=""></p>
<h2 id="base-64"><a href="#base-64" class="headerlink" title="base 64"></a>base 64</h2><p>  特点：密文以=或==结尾，数据多为26个英文字母大小写0-9字符组合<br>  Base64的索引表，字符选用了”A-Z、a-z、0-9、+、/“ 64个可打印字符，这是标准的Base64协议规定。<br>  第一步，将待转换的字符串每三个字节分为一组，每个字节占8bit，那么共有24个二进制位。<br>  第二步，将上面的24个二进制位每6个一组，共分为4组。<br>  <img src= "/img/loading.gif" data-src="4.jpg" alt=""><br>  第三步，在每组前面添加两个0，每组由6个变为8个二进制位，总共32个二进制位，即四个字节。<br>  第四步，根据Base64编码对照表获得对应的值。<br>  <img src= "/img/loading.gif" data-src="6.png" alt=""><br>  位数不足的情况：<br>  两个字节：两个字节共16个二进制位，依旧按照规则进行分组。此时总共16个二进制位，每6个一组，则第三组缺少2位，用0补齐，得到三个Base64编码，第四组完全没有数据则用“=”补上。因此，上图中“BC”转换之后为“QKM=”；<br>  一个字节：一个字节共8个二进制位，依旧按照规则进行分组。此时共8个二进制位，每6个一组，则第二组缺少4位，用0补齐，得到两个Base64编码，而后面两组没有对应数据，都用“=”补上。因此，下图中“A”转换之后为“QQ==”<br>  <img src= "/img/loading.gif" data-src="5.png" alt=""></p>
<h2 id="URL编码"><a href="#URL编码" class="headerlink" title="URL编码"></a>URL编码</h2><p>  特点：密文中有多个%号符<br>  URL编码是一个字符ASCII码的十六进制基础上稍微变动，需要在前面加上“%”。比如\的ASCII码是92，十六进制为5c，所以\的URL编码就是%5c</p>
<h2 id="Unicode编码"><a href="#Unicode编码" class="headerlink" title="Unicode编码"></a>Unicode编码</h2><p>  特点：密文中有多个\uxxxx<br>  Unicode码扩展自ASCII字元集。在严格的ASCII中，每个字元用7位元表示，或者电脑上普遍使用的每字元有8位宽，而Unicode使用全16位元字元集。这使得Unicode能表示世界上所有的书写语言中可能用于电脑通讯的字元、形象文字和其他符号。</p>
<h2 id="js混淆"><a href="#js混淆" class="headerlink" title="js混淆"></a>js混淆</h2><p>  特点：密文中有多个\xaa十六进制数<br>  混淆：经过编码将变量和函数原命名改为毫无意义的命名（如function(a,b,c,e,g)等），以防止他人窥视和窃取 Javascript 源代码，也有一定压缩效果。混淆是故意制造混淆代码的行为，即让人难以理解的源代码或机器码。它类似于加密，但机器能够理解代码并能够执行它。<br>  加密：一般用eval方法加密，效果与混淆相似，也做到了压缩的效果。</p>
<h1 id="0x03常见加密算法"><a href="#0x03常见加密算法" class="headerlink" title="0x03常见加密算法"></a>0x03常见加密算法</h1><p><a href="https://blog.csdn.net/baidu_22254181/article/details/82594072" target="_blank" rel="noopener">常见的7总加密算法</a></p>
<h1 id="0x04摘要算法"><a href="#0x04摘要算法" class="headerlink" title="0x04摘要算法"></a>0x04摘要算法</h1><p>  通过对所有数据提取指纹信息以实现数据签名、数据完整性校验等功能，由于其不可逆性，有时候会被用作敏感信息的加密。数据摘要算法也被称为哈希（Hash）算法、散列算法、常见的摘要算法有MD5和SHA</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL中输入中文报错处理</title>
    <url>/MySQL%E4%B8%AD%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87%E6%8A%A5%E9%94%99%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="MySQL中输入中文报错处理"><a href="#MySQL中输入中文报错处理" class="headerlink" title="MySQL中输入中文报错处理"></a>MySQL中输入中文报错处理</h1><ol>
<li><p>安装MySQL的时候如果没有对数据库编码做修改默认数据库编码是latin1，这个编码是不支持中文的，一般情况下我们将数据库的默认编码修改为utf8（俗称万国码）就可以解决不支持中文的问题</p>
</li>
<li><p>我们在插入的中文的数据出现报错是基本可以断定就是编码方式的问题导致的。先去确认一下数据库编码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> ‘%<span class="built_in">char</span>%’;</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200326184041334.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NTkyODY5,size_16,color_FFFFFF,t_70" alt=""><br>你可以看到有七条编码但是编码方式都不唯一有Latin有gbk或者utf8，我列出的上图是没问题的，你的如果和上图不一致就是有问题的。<br>你需要做的是将上列除了第四条character_set_filesystem 的编码方式二进制不做修改，将其余的全部改成utf8。</p>
</li>
<li><p>找到my.ini MySQL的配置文件，该配置文件在你的mysql安装路径下<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200326184109891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NTkyODY5,size_16,color_FFFFFF,t_70" alt=""><br>基本顺着这条路径就能找到了，或者找到你开始菜单的mysql快捷方式右击选择打开文件所在路径<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200326184213867.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NTkyODY5,size_16,color_FFFFFF,t_70" alt=""><br>在路径下你需要找到这个文件my.ini</p>
</li>
<li><p>以文本方式打开<br>去找到[client]在下面加上一句代码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">default-character-<span class="keyword">set</span>=utf8</span><br></pre></td></tr></table></figure>
<p>再去找到[mysqld]在下面加上一句代码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">character-<span class="keyword">set</span>-<span class="keyword">server</span> = utf8</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200326184359728.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NTkyODY5,size_16,color_FFFFFF,t_70" alt=""><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200326184428395.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NTkyODY5,size_16,color_FFFFFF,t_70" alt=""><br>!!!需要注意的是mysql的版本对这两条代码的支持是不一样的，一般5.几以上的版本使用这两条都没问题，低版本的可能不可以。如果保存配置后mysql重启不了，无法打开就说明这两条代码有问题了，你要根据你安装的版本去百度mysql默认编码ini配置代码。</p>
</li>
<li><p>将以上两条代码添加好保存后重启mysql服务。<br>右击计算机（此电脑）——管理——服务<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200326184558870.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NTkyODY5,size_16,color_FFFFFF,t_70" alt=""><br>找到mysqld右击重启服务，版本不同名称不一定相同，仔细找一下，如果真的不好找也不要紧把电脑重启一下，这样mysql服务自然就重启了。</p>
</li>
<li><p>再去打开cmd的mysql控台（修改ini后mysql控台打不开了请看下面第7条）<br>输入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> ‘%<span class="built_in">char</span>%’;</span><br></pre></td></tr></table></figure>
<p>检查一下是否都更改过来了。要求123567除了第4条编码都要一致。如果一致现在在去插入一下数据，中文就可以了。<br>如果还有不一致的使用set [这里替换为Variable_name 不加方括号]=utf8;命令就可以将其改成utf8了<br>例如要改第一条命令是</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> character_set_client=utf8；</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改ini文件后mysql启动不了怎么办<br>如果修改完my.ini mysql服务启动不了了，mysql控台打不开了说明在my.ini文件中的配置命令不对，去检查一下，命令无误也可能说明你的版本不支持上述的两条命令，你需要去百度找到相应的命令再修改。<br>在mysql的安装目录下你仔细找一下会有一个mysql.log文件，版本不同也可能名字不同可以看看其他名字.log结尾的，这是mysql的日志，打开里面会有mysql不能启动的报错具体原因可根据mysql日志来调整ini配置。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Metasploitable2靶机安装</title>
    <url>/Metasploitable2%E9%9D%B6%E6%9C%BA%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="Metasploitable2靶机安装"><a href="#Metasploitable2靶机安装" class="headerlink" title="Metasploitable2靶机安装"></a>Metasploitable2靶机安装</h2><p>Metasploitable2 虚拟系统是一个特别制作的ubuntu操作系统，本身设计作为安全工具测试和演示常见漏洞攻击。版本2已经可以下载，并且比上一个版本包含更多可利用的安全漏洞。这个版本的虚拟系统兼容VMware，VirtualBox,和其他虚拟平台。默认只开启一个网络适配器并且开启NAT和Host-only，本镜像一定不要暴漏在一个易受攻击的网络中。<br>当虚拟系统启动之后，使用用户名msfadmin，和密码msfadmin登陆。使用shell运行ifconfig命令来确认IP地址。</p>
<h3 id="下载解压"><a href="#下载解压" class="headerlink" title="下载解压"></a>下载解压</h3><p>附：<a href="https://sourceforge.net/projects/metasploitable/" target="_blank" rel="noopener">Metasploitable2</a>下载地址<br>下载后解压到任意文件夹（例：E:\VM\Metasploitable2-Linux）<br><img src= "/img/loading.gif" data-src="1.png" alt=""><br><img src= "/img/loading.gif" data-src="2.png" alt=""></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>打开VMware选择 文件——打开,选择Metasploitable.vmx文件<br><img src= "/img/loading.gif" data-src="3.png" alt=""><br><img src= "/img/loading.gif" data-src="4.png" alt=""></p>
<h3 id="启动、配置"><a href="#启动、配置" class="headerlink" title="启动、配置"></a>启动、配置</h3><p>启动该虚拟机，使用默认用户名msfadmin密码msfadmin登录（注意输入密码时不会显示）<br><img src= "/img/loading.gif" data-src="5.png" alt=""><br>查看虚拟机IP</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-src="6.png" alt=""><br>打开浏览器访问该IP测试，出现下图页面说明安装成功<br><img src= "/img/loading.gif" data-src="7.png" alt=""></p>
<p>Metasploitable2的数据库配置存在一定问题，默认情况下会导致所有的渗透不成功，需要修改配置文件，具体步骤如下<br>切换到root权限下,提示输入用户名密码输入msfadmin</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure>
<p>使用vim编辑配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /var/www/mutillidae/congfig.inc</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-src="8.png" alt=""><br>修改数据库名为dbname=owasp10</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dbname=owasp10</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-src="9.png" alt=""></p>
<h3 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h3><p>至此，靶机环境搭建完成，您可以正式进行渗透测试的实验。祝愿你我在渗透测试的学习道路上风雨无阻，我们彼此学习共同进步，在网络安全的领域完成彼此的梦想。</p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title>MISC杂项入门</title>
    <url>/MISC%E6%9D%82%E9%A1%B9%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="MISC杂项入门"><a href="#MISC杂项入门" class="headerlink" title="MISC杂项入门"></a>MISC杂项入门</h1><h2 id="0x01-文件操作"><a href="#0x01-文件操作" class="headerlink" title="0x01 文件操作"></a>0x01 文件操作</h2><h3 id="1-file命令-适用于不知道后缀名"><a href="#1-file命令-适用于不知道后缀名" class="headerlink" title="1.file命令:适用于不知道后缀名"></a>1.file命令:适用于不知道后缀名</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">file filename</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-src="1.png" alt="img"></p>
<h3 id="2-010Editor、winhex-16进制编辑器通过查看16进制文件头判断文件类型"><a href="#2-010Editor、winhex-16进制编辑器通过查看16进制文件头判断文件类型" class="headerlink" title="2.010Editor、winhex 16进制编辑器通过查看16进制文件头判断文件类型"></a>2.010Editor、winhex 16进制编辑器通过查看16进制文件头判断文件类型</h3><p><img src= "/img/loading.gif" data-src="2.png" alt="img"></p>
<h3 id="3-文件头残缺、错误：通过16进制编辑器修补"><a href="#3-文件头残缺、错误：通过16进制编辑器修补" class="headerlink" title="3.文件头残缺、错误：通过16进制编辑器修补"></a>3.文件头残缺、错误：通过16进制编辑器修补</h3><h3 id="4-文件分离（对隐藏在一个文件中的其他文件数据进行剥离）"><a href="#4-文件分离（对隐藏在一个文件中的其他文件数据进行剥离）" class="headerlink" title="4.文件分离（对隐藏在一个文件中的其他文件数据进行剥离）"></a>4.文件分离（对隐藏在一个文件中的其他文件数据进行剥离）</h3><h4 id="4-1-Binwalk工具"><a href="#4-1-Binwalk工具" class="headerlink" title="4-1 Binwalk工具"></a>4-1 Binwalk工具</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">binwalk filename  //分析文件</span><br><span class="line">binwalk -e filename    //分离文件</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="3.png" alt="img"></p>
<h4 id="4-2-foremost工具"><a href="#4-2-foremost工具" class="headerlink" title="4-2 foremost工具"></a>4-2 foremost工具</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">foremost filename -o dirname</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="4.png" alt="img"></p>
<h4 id="4-3-dd手动分离工具"><a href="#4-3-dd手动分离工具" class="headerlink" title="4-3 dd手动分离工具"></a>4-3 dd手动分离工具</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=源文件 of=目标文件名 bs=1 skip=分离的字节数</span><br></pre></td></tr></table></figure>

<h4 id="4-4-winhex手动分离"><a href="#4-4-winhex手动分离" class="headerlink" title="4-4 winhex手动分离"></a>4-4 winhex手动分离</h4><h4 id="4-5-010Editor手动分离"><a href="#4-5-010Editor手动分离" class="headerlink" title="4-5 010Editor手动分离"></a>4-5 010Editor手动分离</h4><h3 id="5-文件合并"><a href="#5-文件合并" class="headerlink" title="5.文件合并"></a>5.文件合并</h3><h4 id="5-1-Linux下文件合并"><a href="#5-1-Linux下文件合并" class="headerlink" title="5-1 Linux下文件合并"></a>5-1 Linux下文件合并</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#合并 cat 合并的文件 &gt; 输出文件</span></span><br><span class="line">cat file1 file2 。。。 filen &gt; endfile</span><br><span class="line"></span><br><span class="line"><span class="comment">#完整性检测</span></span><br><span class="line">md5sum filename</span><br></pre></td></tr></table></figure>

<h4 id="5-2-Windows下文件合并"><a href="#5-2-Windows下文件合并" class="headerlink" title="5-2 Windows下文件合并"></a>5-2 Windows下文件合并</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#合并 copy /B 合并的文件 输出的文件</span></span><br><span class="line">copy /B file1+file2+...+filen endfile</span><br><span class="line"></span><br><span class="line"><span class="comment">#完整性检测</span></span><br><span class="line">certutil -hashfile filename md5</span><br></pre></td></tr></table></figure>

<p>0x02 文件内容隐写</p>
<h6 id="将KEY以16进制形式写在文件开头或结尾"><a href="#将KEY以16进制形式写在文件开头或结尾" class="headerlink" title="将KEY以16进制形式写在文件开头或结尾"></a>将KEY以16进制形式写在文件开头或结尾</h6><h3 id="1-使用winhex-010Editor-16进制编辑器查看"><a href="#1-使用winhex-010Editor-16进制编辑器查看" class="headerlink" title="1.使用winhex/010Editor 16进制编辑器查看"></a>1.使用winhex/010Editor 16进制编辑器查看</h3><h3 id="2-使用Notepad-等文本编辑器通过16进制编码形式查看"><a href="#2-使用Notepad-等文本编辑器通过16进制编码形式查看" class="headerlink" title="2.使用Notepad++等文本编辑器通过16进制编码形式查看"></a>2.使用Notepad++等文本编辑器通过16进制编码形式查看</h3><h2 id="0x03-图片隐写"><a href="#0x03-图片隐写" class="headerlink" title="0x03 图片隐写"></a>0x03 图片隐写</h2><h3 id="1-LSB最低有效位隐写"><a href="#1-LSB最低有效位隐写" class="headerlink" title="1.LSB最低有效位隐写"></a>1.LSB最低有效位隐写</h3><p>  将像素色彩16进制数据修改每个色彩位最后一位，使得颜色差别几乎无变化</p>
<p>  使用脚本、Stegsolve、zsteg、wbstego4等工具</p>
<h4 id="1-1-Stegsolve的使用"><a href="#1-1-Stegsolve的使用" class="headerlink" title="1-1 Stegsolve的使用"></a>1-1 Stegsolve的使用</h4><p>​     File &gt;&gt; open  &gt;&gt; Analyse  &gt;&gt;  Data Extract</p>
<p><img src= "/img/loading.gif" data-src="5.png" alt=""></p>
<h4 id="1-2-Zsteg-linux工具处理png和bmp图片的隐写数据"><a href="#1-2-Zsteg-linux工具处理png和bmp图片的隐写数据" class="headerlink" title="1-2 Zsteg(linux工具处理png和bmp图片的隐写数据)"></a>1-2 Zsteg(linux工具处理png和bmp图片的隐写数据)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line">gem install zsteg</span><br><span class="line"><span class="comment">#检测隐写</span></span><br><span class="line">zsteg xxx.png</span><br></pre></td></tr></table></figure>

<h4 id="1-3-wbsteggo4"><a href="#1-3-wbsteggo4" class="headerlink" title="1-3 wbsteggo4"></a>1-3 wbsteggo4</h4><p>​    解密通过lsb加密的图片 (.png  .bmp)</p>
<p><img src= "/img/loading.gif" data-src="10.png" alt=""></p>
<h4 id="1-4-python脚本"><a href="#1-4-python脚本" class="headerlink" title="1-4 python脚本"></a>1-4 python脚本</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#python2</span></span><br><span class="line"><span class="keyword">import</span> PIL.Image</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    im = PIL.Image.open(<span class="string">'filename.png'</span>)</span><br><span class="line">    im2 = im.copy()</span><br><span class="line">    pix = im2.load()</span><br><span class="line">    width,height = im2.size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">0</span>, width):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> xrange(<span class="number">0</span>, height):</span><br><span class="line">            <span class="keyword">if</span> pix[x, y] &amp; <span class="number">0x1</span> == <span class="number">0</span>:</span><br><span class="line">                pix[x, y] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pix[x, y] = <span class="number">255</span></span><br><span class="line">    im2.show()</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    foo()</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'ok.'</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>



<h3 id="2-Exif"><a href="#2-Exif" class="headerlink" title="2.Exif"></a>2.Exif</h3><p>   图片信息详情，版权信息等</p>
<h5 id="3-图片叠加"><a href="#3-图片叠加" class="headerlink" title="3.图片叠加"></a>3.图片叠加</h5><p>   工具Stegsolve</p>
<p>  两张图片外观、大小、像素基本相同时，通过对像素的RGB进行XOR、ADD、SUB等操作</p>
<p>  图片通道信息查看</p>
<h3 id="4-图片修复"><a href="#4-图片修复" class="headerlink" title="4.图片修复"></a>4.图片修复</h3><p>   图片头图片尾修复、CRC校验修复、长宽高修复</p>
<h4 id="4-1TweakPNG"><a href="#4-1TweakPNG" class="headerlink" title="4-1TweakPNG"></a>4-1TweakPNG</h4><p> 查看修改PNG图像文件的信息源，检验CRC校验</p>
<p><img src= "/img/loading.gif" data-src="6.png" alt=""></p>
<h4 id="4-2-已知正确CRC计算图片宽高"><a href="#4-2-已知正确CRC计算图片宽高" class="headerlink" title="4-2 已知正确CRC计算图片宽高"></a>4-2 已知正确CRC计算图片宽高</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#python 3</span></span><br><span class="line"><span class="comment"># 用于已知正确的CRC计算宽度和高度</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line">crcbp = open(<span class="string">"filename.png"</span>, <span class="string">"rb"</span>).read()     <span class="comment"># 填写图片名</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1024</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1024</span>):</span><br><span class="line">        data = crcbp[<span class="number">12</span>:<span class="number">16</span>] + struct.pack(<span class="string">'&gt;i'</span>, i) + struct.pack(<span class="string">'&gt;i'</span>, j) + crcbp[<span class="number">24</span>:<span class="number">29</span>]</span><br><span class="line">        crc32 = binascii.crc32(data) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        <span class="keyword">if</span> crc32 == <span class="number">0x19355d41</span>:  <span class="comment"># 填写图片的CRC</span></span><br><span class="line">            print(i, j)</span><br><span class="line">            <span class="keyword">print</span> (<span class="string">"hex"</span>, hex(i), hex(j))</span><br></pre></td></tr></table></figure>

<h3 id="5-图片加解密"><a href="#5-图片加解密" class="headerlink" title="5. 图片加解密"></a>5. 图片加解密</h3><h4 id="5-1-stegdetect"><a href="#5-1-stegdetect" class="headerlink" title="5-1 stegdetect"></a>5-1 stegdetect</h4><p>​    自动检测图像中隐藏内容的工具,主要实现JPEG图像的隐秘信息的嵌入的检测，可以检测到JSteg、JPHide、OutGuess、Invisible Secrets、F5、appendX 和 Camouflage等隐写工具隐藏的信息，win命令行使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检测加密方式</span></span><br><span class="line">stegdetect.exe -tjopi -s 10.0 filename.jpg</span><br><span class="line"><span class="comment"># 破解密码</span></span><br><span class="line">stegbreak.exe -r rules.ini -f password.txt -t p filename.jpg</span><br></pre></td></tr></table></figure>

<h4 id="5-2-Bftools"><a href="#5-2-Bftools" class="headerlink" title="5-2 Bftools"></a>5-2 Bftools</h4><p>​    解密图片信息，win命令行使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bftools.exe decode braincopter filename -output outfilename</span><br></pre></td></tr></table></figure>

<h4 id="5-3-SilentEye"><a href="#5-3-SilentEye" class="headerlink" title="5-3 SilentEye"></a>5-3 SilentEye</h4><p>   win 图形化工具，将文字或文件隐藏到图片中的解密工具</p>
<p><img src= "/img/loading.gif" data-src="7.png" alt=""></p>
<p>5-4 Jphide</p>
<p>​    基于最低有效位的JPEG隐写算法，当stegdetect检测为jphide加密时，可以使用jphs进行解密，win界面化工具，运行exe文件  &gt;&gt; open jpeg  &gt;&gt;  seek &gt;&gt;  输入密码  &gt;&gt; 选择保存位置  保存txt文件</p>
<p><img src= "/img/loading.gif" data-src="8.png" alt=""></p>
<h6 id="5-5-outguess"><a href="#5-5-outguess" class="headerlink" title="5-5 outguess"></a>5-5 outguess</h6><p>Stegdetect识别为outguess加密的图片使用该工具解密，Linux工具第一次使用需要编译一下，需要gcc环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#初次使用下载&amp;安装编译</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/crorvick/outguess  <span class="comment">#下载</span></span><br><span class="line">./configure &amp;&amp; make &amp;&amp; make install             <span class="comment">#安装编译</span></span><br><span class="line"><span class="comment">#解密命令</span></span><br><span class="line">outguess -r url:filename -t 11.txt</span><br></pre></td></tr></table></figure>

<h4 id="5-6-F5"><a href="#5-6-F5" class="headerlink" title="5-6 F5"></a>5-6 F5</h4><p>   Stegdetect识别为F5加密的图片使用该工具解密，win命令行使用，需要Java环境</p>
<p>进入F5-steganography-james，将图片拷贝到该目录，cmd该目录下,运行解密命令从output.txt 中看到结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Java Exrtact filename -p password</span><br></pre></td></tr></table></figure>

<h4 id="5-6-CQR"><a href="#5-6-CQR" class="headerlink" title="5-6 CQR"></a>5-6 CQR</h4><p>  二维码扫描工具吗，win界面化</p>
<p><img src= "/img/loading.gif" data-src="9.png" alt=""></p>
<h4 id="5-7-PS-画图工具"><a href="#5-7-PS-画图工具" class="headerlink" title="5-7 PS/画图工具"></a>5-7 PS/画图工具</h4><p>  掌握简单的图片裁剪处理、格式转换</p>
<h2 id="0x04-压缩文件处理"><a href="#0x04-压缩文件处理" class="headerlink" title="0x04 压缩文件处理"></a>0x04 压缩文件处理</h2><p>1.伪加密zip</p>
<p>伪加密一般只存在于zip格式的压缩包，使用winhex 16进制编辑器打开文件查看全局方式标记位（一般第9-10位）是否为0000，若非0则被篡改伪加密</p>
<p>  zip文件标识</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">50 4B 01 02：目录中文件文件头标记(0x02014b50)</span><br><span class="line">3F 00：压缩使用的 pkware 版本</span><br><span class="line">14 00：解压文件所需 pkware 版本</span><br><span class="line">00 00：全局方式位标记（有无加密，这个更改这里进行伪加密，改为09 00打开就会提示有密码了）</span><br><span class="line">08 00：压缩方式</span><br><span class="line">5A 7E：最后修改文件时间</span><br><span class="line">F7 46：最后修改文件日期</span><br><span class="line">16 B5 80 14：CRC-32校验（1480B516）</span><br></pre></td></tr></table></figure>

<p>  伪加密解密软件ZipCenOp.jar,win命令行运行，需要Java环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar ZipCenOp.jar e xxx.zip    <span class="comment">#加密</span></span><br><span class="line">java -jar ZipCenOp.jar r xxx.zip    <span class="comment">#解密</span></span><br></pre></td></tr></table></figure>

<h3 id="2-暴力破解"><a href="#2-暴力破解" class="headerlink" title="2.暴力破解"></a>2.暴力破解</h3><p>  zip爆破工具Ziperello、ARCHPR</p>
<p><img src= "/img/loading.gif" data-src="11.png" alt=""></p>
<p><img src= "/img/loading.gif" data-src="12.png" alt=""></p>
<p>  rar爆破工具AccentRPR、ARCHPR、RARPasswordUnlocker等</p>
<p> <img src= "/img/loading.gif" data-src="13.png" alt=""></p>
<p><img src= "/img/loading.gif" data-src="14.png" alt=""></p>
<h4 id="2-1-暴力破解"><a href="#2-1-暴力破解" class="headerlink" title="2-1 暴力破解"></a>2-1 暴力破解</h4><h4 id="2-2-掩码"><a href="#2-2-掩码" class="headerlink" title="2-2 掩码"></a>2-2 掩码</h4><p>已知长度或某位密码，如果六位密码已知前三位为abc,掩码可用abc???</p>
<h4 id="2-3-字典"><a href="#2-3-字典" class="headerlink" title="2-3 字典"></a>2-3 字典</h4><p> 跑字典包</p>
<h4 id="2-4-明文攻击"><a href="#2-4-明文攻击" class="headerlink" title="2-4 明文攻击"></a>2-4 明文攻击</h4><p>已知压缩包内部分文件明文内容，通过内容推测密钥解密</p>
<p>例如：压缩包内有a.txt和b.txt两文件，已知a的内容想要获取b</p>
<p>操作：将a.txt压缩为无密码形式（压缩算法要和待破解压缩包一致，压缩后CRC要一致），选择明文攻击方式，明文文件选择a.txt单独压缩无密码文件</p>
<h3 id="3-压缩包文件修复"><a href="#3-压缩包文件修复" class="headerlink" title="3.压缩包文件修复"></a>3.压缩包文件修复</h3><p>使用 010Editor 内置模板进行文件损坏检测修复（多为rar）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HEAD_CRC       2 bytes     整个块或者块某个部分的CRC（根据块类型而有不同） </span><br><span class="line">HEAD_TYPE      1 byte      块类型(也可以理解为块头部类型，因为不同的块对应不同的块头部。)</span><br><span class="line">HEAD_FLAGS     2 bytes     块标志</span><br><span class="line">HEAD_SIZE      2 bytes     块大小</span><br><span class="line">ADD_SIZE       4 bytes     添加块的大小（这是一个可选域）</span><br><span class="line">--------------------</span><br><span class="line">文件块的第3个字节——HEAD_TYPE块类型，也叫头类型</span><br><span class="line">0x72表示标记块</span><br><span class="line">0x73表示压缩文件块</span><br><span class="line">0x74表示文件块  (若0x74不存在则文件被隐藏。压缩包内有多个文件0x74块有多个)</span><br><span class="line">0x75表示注释块</span><br></pre></td></tr></table></figure>

<h2 id="0x05-流量取证"><a href="#0x05-流量取证" class="headerlink" title="0x05 流量取证"></a>0x05 流量取证</h2><h3 id="1-Wireshark的使用"><a href="#1-Wireshark的使用" class="headerlink" title="1. Wireshark的使用"></a>1. Wireshark的使用</h3><h4 id="1-1-过滤命令"><a href="#1-1-过滤命令" class="headerlink" title="1-1 过滤命令"></a>1-1 过滤命令</h4><p>  过滤IP、过滤端口 、过滤协议、过滤MAC地址、包长度过滤、http模式过滤<br><a href="https://www.cnblogs.com/nmap/p/6291683.html" target="_blank" rel="noopener">基础命令</a></p>
<h3 id="1-2-协议分析"><a href="#1-2-协议分析" class="headerlink" title="1-2 协议分析"></a>1-2 协议分析</h3><h3 id="1-3-流汇聚"><a href="#1-3-流汇聚" class="headerlink" title="1-3 流汇聚"></a>1-3 流汇聚</h3><p>  常见的HTTP流关键内容：HTML中直接包含重要信息、上传或下载文件内容，通常包含文件名、hash值等关键信息，常用POST请求上传、一句话木马，POST请求，内容包含eval，内容使用base64</p>
<h3 id="1-4-数据提取"><a href="#1-4-数据提取" class="headerlink" title="1-4 数据提取"></a>1-4 数据提取</h3><p>  导出分组字节流（Ctrl+H）、导出对象</p>
<h3 id="1-5-无线流量包跑密码"><a href="#1-5-无线流量包跑密码" class="headerlink" title="1-5 无线流量包跑密码"></a>1-5 无线流量包跑密码</h3><p>  kali aircrack-ng工具：<br>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">aircrack-ng xxx.cap   <span class="comment">#检查cap包（加密方式）</span></span><br><span class="line">aircrack-ng xxx.cap -w pass.txt    <span class="comment">#字典破解</span></span><br></pre></td></tr></table></figure></p>
<h3 id="1-6-USB流量包文件分析"><a href="#1-6-USB流量包文件分析" class="headerlink" title="1-6 USB流量包文件分析"></a>1-6 USB流量包文件分析</h3><p>  键盘击键，鼠标移动与点击，存储设备的明文传输通信，USB无线网卡网络传输内容<br>  wireshark提供的命令行tshark工具可将leftover capture data数据提取为txt<br>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tshark -r usb.pcap -T fields -e usb.capdata &gt; usbdata.txt</span><br></pre></td></tr></table></figure><br>    鼠标数据包长度为4字节，第一个字节代表按键，0x00没有按键，0x01按左键，0x02按右键，第二个字节代表左右偏移，正为向右偏移多少像素，负为向左偏移多少像素，同理第三字节代表上下偏移上正下负<br>  使用鼠标轨迹脚本,将坐标数据化，再使用gnuplot工具讲坐标画下来<br>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## python 2</span></span><br><span class="line">nums = []</span><br><span class="line">keys = open(<span class="string">'usbdata.txt'</span>,<span class="string">'r'</span>)</span><br><span class="line">posx = <span class="number">0</span></span><br><span class="line">posy = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> kets:</span><br><span class="line">  <span class="keyword">if</span> len(line) != <span class="number">12</span>:</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">  x = int(line[<span class="number">3</span>:<span class="number">5</span>], <span class="number">16</span>)</span><br><span class="line">  y = int(line[<span class="number">6</span>:<span class="number">8</span>, <span class="number">16</span>])</span><br><span class="line">  <span class="keyword">if</span> x &gt; <span class="number">127</span>:</span><br><span class="line">    x -= <span class="number">256</span></span><br><span class="line">  <span class="keyword">if</span> y &gt; <span class="number">127</span>:</span><br><span class="line">    y -= <span class="number">256</span></span><br><span class="line">  posx += x</span><br><span class="line">  posy += y</span><br><span class="line">  btn_flag = int(line[<span class="number">0</span>:<span class="number">2</span>], <span class="number">16</span>) <span class="comment">#1for left,2for right,0 for nothing</span></span><br><span class="line">  <span class="keyword">print</span> btn_flag</span><br><span class="line">  <span class="keyword">if</span> btn_flag == <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">print</span> posx, posy</span><br><span class="line">keys.close()</span><br></pre></td></tr></table></figure><br>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 使用脚本导出数据</span></span><br><span class="line">python mouse.py &gt; xy.txt</span><br><span class="line"><span class="comment">## gnuplot工具使用命令</span></span><br><span class="line">gnuplot   <span class="comment">#启动</span></span><br><span class="line">plot <span class="string">"xy.txt"</span> <span class="comment">#导入数据</span></span><br></pre></td></tr></table></figure></p>
<h3 id="1-7经过TLS加密的HTTPS流量"><a href="#1-7经过TLS加密的HTTPS流量" class="headerlink" title="1-7经过TLS加密的HTTPS流量"></a>1-7经过TLS加密的HTTPS流量</h3><p>导入秘钥转换为HTTP流量：<br>编辑 &gt; 首选项 &gt; Protocols &gt; TLS<br><img src= "/img/loading.gif" data-src="15.png" alt=""></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>简单SQL注入</title>
    <url>/SQL%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="SQL注入攻击"><a href="#SQL注入攻击" class="headerlink" title="SQL注入攻击"></a>SQL注入攻击</h1><p>  动态页面有时会通过引擎将用户输入的参数按照预设定的规则构造为SQL语句来执行数据库操作，SQL注入攻击指的是通过构建特殊的输入作为参数传入web应用程序，改变原有SQL语句的语义来执行攻击者所要的操作，其主要原因是程序没有采取必要的措施避免用户输入内容改变原有SQL语句的语义。</p>
<h2 id="SQL注入的危害"><a href="#SQL注入的危害" class="headerlink" title="SQL注入的危害"></a>SQL注入的危害</h2><p>  绕过登录验证：使用万能密码登录网站后台。<br>  获取敏感数据：获取网站管理员账号、密码等。<br>  文件系统操作：列目录，读取、写入文件等。<br>  注册表操作：读取、写入、删除注册表等。<br>  执行系统命令：远程执行命令。</p>
<h2 id="3种经典的万能密码"><a href="#3种经典的万能密码" class="headerlink" title="3种经典的万能密码"></a>3种经典的万能密码</h2><h3 id="用户名已知"><a href="#用户名已知" class="headerlink" title="用户名已知"></a>用户名已知</h3><p>1.用户名：admin 密码：1’or’1’=’1</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="string">'ad'</span> <span class="keyword">where</span> username=<span class="string">'admin'</span> <span class="keyword">and</span> <span class="keyword">password</span>=<span class="string">'1'</span><span class="keyword">or</span><span class="string">'1'</span>=<span class="string">'1'</span></span><br></pre></td></tr></table></figure>
<p>在SQL语句中and执行优先级比or高，上面构造的SQL语句中 用户名为admin and 密码为1的结果为false，1=1的结果为true，通过or运算 false or true结果为true<br>2.<br>用户名：admin’or’1’=’1 密码：随意</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="string">'ad'</span> <span class="keyword">where</span> username=<span class="string">'admin'</span><span class="keyword">or</span><span class="string">'1'</span>=<span class="string">'1'</span> <span class="keyword">and</span> <span class="keyword">password</span>=<span class="string">'xxx'</span></span><br></pre></td></tr></table></figure>
<h3 id="用户名未知"><a href="#用户名未知" class="headerlink" title="用户名未知"></a>用户名未知</h3><p>1.用户名：1’or’1’or’1 密码：随意</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="string">'ad'</span> <span class="keyword">where</span> username=<span class="string">'1'</span><span class="keyword">or</span><span class="string">'1'</span><span class="keyword">or</span><span class="string">'1'</span> <span class="keyword">and</span> <span class="keyword">password</span>=<span class="string">'xxx'</span></span><br></pre></td></tr></table></figure>
<h3 id="可用注释符号"><a href="#可用注释符号" class="headerlink" title="可用注释符号"></a>可用注释符号</h3><p>1.用户名：admin’# 密码：随意</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="string">'ad'</span> <span class="keyword">where</span> username=<span class="string">'admin'</span><span class="comment">#'and password='xxx'</span></span><br></pre></td></tr></table></figure>
<p>2.用户名：’or 1=1# 密码：随意</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="string">'ad'</span> <span class="keyword">where</span> username=<span class="string">''</span><span class="keyword">or</span> <span class="number">1</span>=<span class="number">1</span><span class="comment">#' and password='xxx'</span></span><br></pre></td></tr></table></figure>
<h2 id="SQL注入漏洞练习环境推荐DVWA"><a href="#SQL注入漏洞练习环境推荐DVWA" class="headerlink" title="SQL注入漏洞练习环境推荐DVWA"></a>SQL注入漏洞练习环境推荐DVWA</h2><p><a href="http://www.dvwa.co.uk" target="_blank" rel="noopener">DVWA(Damn Vulnerable Web Application)</a>一个用来进行安全脆弱性鉴定的PHP/MySQL Web 应用，旨在为安全专业人员测试自己的专业技能和工具提供合法的环境，帮助web开发者更好的理解web应用安全防范的过程。<br>DVWA 一共包含了十个攻击模块，分别是：Brute Force（暴力（破解））、Command Injection（命令行注入）、CSRF（跨站请求伪造）、- File Inclusion（文件包含）、File Upload（文件上传）、Insecure CAPTCHA （不安全的验证码）、SQL Injection（SQL注入）、SQL  Injection（Blind）（SQL盲注）、XSS（Reflected）（反射型跨站脚本）、XSS（Stored）（存储型跨站脚本）。包含了 OWASP TOP10 的所有攻击漏洞的练习环境，一站式解决所有 Web 渗透的学习环境。<br>安装步骤：<br>1.下载安装包<br><img src= "/img/loading.gif" data-src="1.png" alt=""><br>2.解压安装包配置数据库<br> 将压缩包文件解压PHP服务器环境www目录下，打开dvwa/config/config.inc.php配置数据库<br> <img src= "/img/loading.gif" data-src="2.png" alt=""><br>3.访问127.0.0.1/dvwa/setup.php安装程序<br>  创建数据库<br>  <img src= "/img/loading.gif" data-src="3.png" alt=""><br>4.安装成功进入<br>默认账户admin密码password</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware安装kali设置中文版</title>
    <url>/VMware%E5%AE%89%E8%A3%85kali%E8%AE%BE%E7%BD%AE%E4%B8%AD%E6%96%87%E7%89%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="下载kali免安装文件"><a href="#下载kali免安装文件" class="headerlink" title="下载kali免安装文件"></a>下载kali免安装文件</h2><p>到<a href="https://www.kali.org/downloads/" target="_blank" rel="noopener">kali官网</a>下载VMware免安装版<br><img src= "/img/loading.gif" data-src="0.png" alt=""></p>
<h2 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h2><p>将下载好的.7z压缩包文件放到虚拟机目录中解压出来<br><img src= "/img/loading.gif" data-src="1.png" alt=""></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>运行vmware,选择“文件——打开”<br><img src= "/img/loading.gif" data-src="2.png" alt=""><br>选择刚才解压的文件路径找到.vmx文件打开<br><img src= "/img/loading.gif" data-src="3.png" alt=""></p>
<h2 id="WM设置"><a href="#WM设置" class="headerlink" title="WM设置"></a>WM设置</h2><p>打开后，在描述中的内容为kali信息（用户名和密码），选择编辑虚拟机设置<br><img src= "/img/loading.gif" data-src="4.png" alt=""><br>将网络适配器设为NAT模式，内存、处理器根据自己电脑的配置分配<br><img src= "/img/loading.gif" data-src="5.png" alt=""><br>选项设置，将客户机操作系统设为Linux–Ubuntu<br><img src= "/img/loading.gif" data-src="20.png" alt=""></p>
<h2 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h2><p>弹出提示框选择我已复制<br><img src= "/img/loading.gif" data-src="6.png" alt=""><br>进入系统输入用户名kali密码kali(下载的不同版本用户名密码略有不同注意查看未启动界面的kali信息描述)<br><img src= "/img/loading.gif" data-src="7.png" alt=""><br>登录成功后查看右上角网络图标是否显示正常，打开命令终端ping一下百度地址测试一下是否联网<br><img src= "/img/loading.gif" data-src="8.png" alt=""><br>测试失败，先检查物理机是否已联网，逐步排查，<a href="https://blog.csdn.net/play_chess_itmanito/article/details/84557575" target="_blank" rel="noopener">还原一下WMware虚拟网络设置</a></p>
<h2 id="更换国内源"><a href="#更换国内源" class="headerlink" title="更换国内源"></a>更换国内源</h2><p>打开终端，切换root用户权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure>
<p>提示输入密码，输入kali(输入时不显示)<br>修改源配置文件,使用vim文本编辑器打开sources.list文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-src="9.png" alt=""><br>按A键进入编辑模式，将第二行使用#号注释掉，添加一个国内源，下表中任意都可。按Esc键退出编辑模式，输入:wq保存并退出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:wq</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-src="10.png" alt=""><br>附上国内kali源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#中科大</span></span><br><span class="line">deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line"><span class="comment">#阿里云</span></span><br><span class="line">deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line"><span class="comment">#清华大学</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line"><span class="comment">#163</span></span><br><span class="line">deb http://mirrors.163.com/debian wheezy main non-free contrib</span><br><span class="line">deb-src http://mirrors.163.com/debian wheezy main non-free contrib</span><br><span class="line">deb http://mirrors.163.com/debian wheezy-proposed-updates main non-free contrib</span><br><span class="line">deb-src http://mirrors.163.com/debian wheezy-proposed-updates main non-free contrib</span><br><span class="line">deb-src http://mirrors.163.com/debian-security wheezy/updates main non-free contrib</span><br><span class="line"><span class="comment">#东软大学</span></span><br><span class="line">deb http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib</span><br><span class="line">deb-src http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib</span><br></pre></td></tr></table></figure>

<p>更新源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-src="11.png" alt=""></p>
<h2 id="设置系统为中文"><a href="#设置系统为中文" class="headerlink" title="设置系统为中文"></a>设置系统为中文</h2><p>下载安装中文字体</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install xfonts-intl-chinese ttf-wqy-microhei</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-src="12.png" alt=""><br>设置系统语言区域</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg-reconfigure locales</span><br></pre></td></tr></table></figure>
<p>输入上面命令打开下图设置界面<br><img src= "/img/loading.gif" data-src="13.png" alt=""><br>使用上下键或鼠标滑轮移动光标，使用空格选中，将[en_US.UTF-8 UTF-8]取消勾选<br><img src= "/img/loading.gif" data-src="13.png" alt=""><br>将 [zh_CN.GBK GBK 和 [zh_CN.UTF_8 UTF_8]选中<br>使用Tab键切换选择OK回车<br><img src= "/img/loading.gif" data-src="14.png" alt=""><br>系统默认语言环境选择zh_CN.UTF-8<br><img src= "/img/loading.gif" data-src="15.png" alt=""></p>
<p>重启kali</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>

<p>开机后可发现系统登录界面已被汉化，输入用户名密码登录<br><img src= "/img/loading.gif" data-src="17.png" alt=""><br>开机后弹出更新文件夹语言提示框选择保留旧的名称(更新后的中文名称会使路径变成中文，导致安装软件报错)<br><img src= "/img/loading.gif" data-src="18.png" alt=""></p>
<p>最后查看一下<br><img src= "/img/loading.gif" data-src="19.png" alt=""></p>
<p>如有需要可以安装中文输入法，附上采坑教程<a href="https://blog.csdn.net/qq_39592869/article/details/105389234" target="_blank" rel="noopener">在kali安装中文输入法</a></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客从搭建到部署（一）</title>
    <url>/hexo%E5%8D%9A%E5%AE%A2%E4%BB%8E%E6%90%AD%E5%BB%BA%E5%88%B0%E9%83%A8%E7%BD%B2%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="hexo博客从搭建到部署（GitHub、coding、阿里云）"><a href="#hexo博客从搭建到部署（GitHub、coding、阿里云）" class="headerlink" title="hexo博客从搭建到部署（GitHub、coding、阿里云）"></a>hexo博客从搭建到部署（GitHub、coding、阿里云）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>进来看文章的我就已经默认你已经了解了hexo了，对hexo过多的介绍不在赘述。前段时间脑门一热，突然想搞一个自己的博客，短暂的初步了解选定了hexo框架。自己踩了一堆坑，从生疏到对hexo完全熟悉逐步的把hexo搭建了起来。我写本文的目的想通过本文给那些想要使用hexo的新人指明一个方向，避免少走弯路。希望通过我的教程你能顺利的实现自己的hexo博客。</p>
<p>本文分为多个部分：</p>
<p>第一部分：本地环境安装以及博客安装实现本地浏览</p>
<p>第二部分：<a href="https://www.molengsu.com/hexo博客从搭建到部署（二）/">部署博客到GitHub</a></p>
<p>第三部分：<a href="https://www.molengsu.com/hexo博客从搭建到部署（三）/">部署博客到coding</a></p>
<p>第四部分：部署博客到阿里云服务器</p>
<h2 id="这是第一部分：本地环境安装以及博客本地搭建"><a href="#这是第一部分：本地环境安装以及博客本地搭建" class="headerlink" title="这是第一部分：本地环境安装以及博客本地搭建"></a>这是第一部分：本地环境安装以及博客本地搭建</h2><h1 id="一、安装环境软件"><a href="#一、安装环境软件" class="headerlink" title="一、安装环境软件"></a>一、安装环境软件</h1><p>需要用到的环境：node.js 、git</p>
<p>我是本地win10 下node.js+git环境</p>
<p>关于node.js和Git的安装没什么好说的和其他软件安装一样，下一步下一步就可以了。这里给出软件下载地址</p>
<p><a href="http://nodejs.cn/download/" target="_blank" rel="noopener">node.js</a>      <a href="https://git-scm.com/download/" target="_blank" rel="noopener"> git</a></p>
<p>安装完成验证,打开cmd</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">git version</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="1.png" alt=""></p>
<p>这时在桌面右键鼠标就会出现Git GUI here和Git bash here的选项</p>
<p><img src= "/img/loading.gif" data-src="2.png" alt=""></p>
<p>至此我们的本地环境准备工作已经做好了</p>
<h1 id="二、安装hexo"><a href="#二、安装hexo" class="headerlink" title="二、安装hexo"></a>二、安装hexo</h1><p>我们找一个位置作为根目录，例如在G盘新建一个hexo文件夹 G:\hexo 进入文件夹内在空白处右键选择Git bash here打开git终端</p>
<p><img src= "/img/loading.gif" data-src="3.png" alt=""></p>
<p>执行安装命令开始安装hexo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cil</span><br></pre></td></tr></table></figure>

<p>初始化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init myblog    //myblog文件夹名你可以自己随便取</span><br><span class="line"><span class="built_in">cd</span> myblog    //进入myblog文件夹</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>新建完成后文件中出现以下目录和文件</p>
<p><img src= "/img/loading.gif" data-src="4.png" alt=""></p>
<ul>
<li>node_modules: 依赖包</li>
<li>public：存放生成的页面</li>
<li>scaffolds：生成文章的一些模板</li>
<li>source：源文件</li>
<li>themes：主题存放位置</li>
<li>_config.yml: 博客的配置文件</li>
</ul>
<p>执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g       //生成静态页面</span><br><span class="line">hexo server       //启动hexo服务器</span><br></pre></td></tr></table></figure>

<p>在地址栏输入localhost:4000或127.0.0.1:4000就可以看到初始状态的博客页面了</p>
<h1 id="三、关于主题的更换"><a href="#三、关于主题的更换" class="headerlink" title="三、关于主题的更换"></a>三、关于主题的更换</h1><p>每个人喜欢的风格不一，你们可以自己去百度自己去挑，比如<a href="http://theme-next.iissnan.com" target="_blank" rel="noopener">next</a>、<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">yilia</a>、<a href="https://github.com/WongMinHo/hexo-theme-miho" target="_blank" rel="noopener">butterfly</a>主题都不错，我用的是butterfly</p>
<p>这些主题一般都是在GitHub上的，选好主题后我们可以将其打包下载下来解压到我们的themes文件夹中或者使用命令直接从GitHub克隆到本地，详细的主题安装命令在你找到的主题说明文档下方都会有，这里拿next主题举例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br><span class="line">//git <span class="built_in">clone</span> +主题地址+路径</span><br></pre></td></tr></table></figure>

<p>修改_config.yml配置文件，找到theme: 项将其后面的参数改为你主题目录名，比如你下载了butterfly主题放在themes的butterfly文件夹中那么参数应设为theme： butterfly。注意分号后面需要有一个空格。安装完后重新启动一下hexo就可以看到了。注意，有些主题需要安装依赖不然会有一些错误无法正常访问，你选主题的时候自己详细看一下关于主题的说明文档，需要安装的依赖文档中都会介绍详细的安装方法。</p>
<p>关于主题的优化我不在详细介绍了，因为本文的主要目的还是教你如何将你的hexo博客发布到公网，在加上每个人所选用的主题不一，各主题的优化方式也有差别，所以我不在详细介绍，你可以根据你自己所选的主题去做一些详细的优化，直到达到你满意的状态后再回到这篇文章继续学习如何部署。或者你跟着文章继续学习部署，后期慢慢进行你的主题优化，因为一般主题的优化是一个漫长的过程，你不可能一下达到满意的状态，后期你看到喜欢的小玩意都可以单独的再去加上，并不会对部署更新有任何影响，hexo的优化是灵活的。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>first blog</category>
      </categories>
      <tags>
        <tag>hello word</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客从搭建到部署（三）</title>
    <url>/hexo%E5%8D%9A%E5%AE%A2%E4%BB%8E%E6%90%AD%E5%BB%BA%E5%88%B0%E9%83%A8%E7%BD%B2%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="hexo从搭建到部署（三）"><a href="#hexo从搭建到部署（三）" class="headerlink" title="hexo从搭建到部署（三）"></a>hexo从搭建到部署（三）</h1><h2 id="将hexo部署到coding"><a href="#将hexo部署到coding" class="headerlink" title="将hexo部署到coding"></a>将hexo部署到coding</h2><h3 id="coding简介"><a href="#coding简介" class="headerlink" title="coding简介"></a>coding简介</h3><p>惯例，开始之前还是先简单介绍一下coding，coding和GitHub类似据说是仿的GitHub现在已经被腾讯合并了。不过服务器也是在国外，访问速度一般和GitHub不相上下。缺点是部署的静态网站不像GitHub那样给你一个固定格式好记的访问域名，大致格式这个样，你可以参考我的<a href="https://n02f5a.coding-pages.com" target="_blank" rel="noopener">n02f5a.coding-pages.com</a>，我已经做了域名解析了绑定了新的域名，我个人建议的话最好是自己买个域名我用的.com活动价首年才19，其他的.club  .xyz什么的都可以考虑一下，便宜的就几块钱省两个馒头钱就够了。</p>
<p>那么为什么要选择coding部署我们的博客呢，第一是因为5人一下的团队免费使用，超过5人的团队coding自动升为企业版是要收费的，我们自己注册账号自己用这个就不必担心了，第二是coding没有SEO反爬取，我们部署在coding的博客可以通过SEO优化让百度收录，这样在公网中别人就可以通关键词百度到你的文章了。类似于coding的这种码云国内的好像还有，其他的码云也有几个gitee什么的，我没详细了解，有兴趣的你们可以自己去深究，将博客部署在这种码云上其实原理和步骤大致都是一样的。</p>
<h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h3><p>先去注册<a href="https://coding.net" target="_blank" rel="noopener">coding</a>绑定手机和邮箱</p>
<h3 id="二、项目部署"><a href="#二、项目部署" class="headerlink" title="二、项目部署"></a>二、项目部署</h3><p>1点击头像旁边的创建项目</p>
<p><img src= "/img/loading.gif" data-src="10.png" alt="img"></p>
<p>2.选择devops项目</p>
<p><img src= "/img/loading.gif" data-src="11.png" alt="img"></p>
<p>3.填写项目名称，这里就不必担心名称使用什么了，因为最终访问地址根这个无关</p>
<p><img src= "/img/loading.gif" data-src="12.png" alt="img"></p>
<p>4.本地创建公钥，这一步如果在第二部分GitHub部署中创建了就不必在创建了可以跳过</p>
<p>如果创建了生成的公钥在你的C盘目录下C:\Users\你的用户名.ssh  文件夹下id_rsa.pub 文件中，如果路径下没有那就是没创建</p>
<p>先配置你的Git用户再去创建公钥</p>
<p>先配置Git用户，将下面的用户名和邮箱换成自己的（以下命令都在hexo根目录下使用Git bash命令终端执行就可以了）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">"username"</span> </span><br><span class="line">git config --global user.email <span class="string">"username@temp.com"</span></span><br></pre></td></tr></table></figure>

<p>生成公钥，邮箱换成你自己的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"your_email@example.com"</span></span><br></pre></td></tr></table></figure>

<p>这时C:\Users\你的用户名.ssh  文件夹下id_rsa.pub 文件中就生成了公钥了，复制下来</p>
<p>5.添加公钥</p>
<p>回到coding点击头像下的个人账户设置——ssh公钥——新增公钥添加进去并勾选有效期永久</p>
<p><img src= "/img/loading.gif" data-src="13.png" alt="img"><br><img src= "/img/loading.gif" data-src="14.png" alt="img"></p>
<p>6.验证</p>
<p>打开git命令终端输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@git.coding.net</span><br></pre></td></tr></table></figure>
<p>验证成功给出Hello username You’ve connected to Coding.net by SSH successfully!提示</p>
<p>7.配置自动化部署</p>
<p>打开我们的项目</p>
<p><img src= "/img/loading.gif" data-src="15.png" alt="img"></p>
<p>找到代码厂库在设置中复制ssh地址</p>
<p><img src= "/img/loading.gif" data-src="16.png" alt="img"></p>
<p>打开hexo根目录下的_congif.yml配置文件找到deploy</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    <span class="built_in">type</span>: git</span><br><span class="line">    repository: 刚才复制的内容粘贴到这里</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure>

<p>如果你将博客同时发布到多个仓库可以这样写，注意冒号后面有一个空格</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    <span class="built_in">type</span>: git</span><br><span class="line">    repository:</span><br><span class="line">      github: GitHub地址</span><br><span class="line">      coding: coding地址</span><br><span class="line">      aliyun: 阿里地址</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure>

<p>配置完毕保存退出</p>
<p>8.将本地博客生成的静态文件推到coding仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean    //清除静态文件</span><br><span class="line">hexo g       //生成</span><br><span class="line">hexo d      //将文件推进仓库</span><br></pre></td></tr></table></figure>

<p>9.配置静态网站</p>
<p>在coding项目中选择持续部署——静态网站——新建</p>
<p>为网站随便命个名就可以了</p>
<p><img src= "/img/loading.gif" data-src="17.png" alt="img"></p>
<p><img src= "/img/loading.gif" data-src="18.png" alt="img"></p>
<p>选择刚刚新建的立即部署就会出来访问地址了</p>
<p><img src= "/img/loading.gif" data-src="19.png" alt="img"></p>
<p>10.域名配置</p>
<p>如果你想使用域名解析，先去买一个合适的域名，至于是阿里还是腾讯云或者其他地方我就不管了，买完以后先对域名进行备案实名认证。然后使用CNAME解析到刚coding给的访问地址就可以了。</p>
<p>然后我们在coding设置一下将域名绑定就可以了</p>
<p><img src= "/img/loading.gif" data-src="20.png" alt="img"></p>
<p><img src= "/img/loading.gif" data-src="21.png" alt="img"></p>
<p>这里简单介绍一下域名解析，比如你在腾讯买的域名，那么登录他的管理控台找到你的购买的产品会有相应的设置，不同服务商的都大致相同。举个例子你买的域名是abc.com,解析类型我们常用的是A类型和CNAME类型，A类型就是将域名解析到一个IP，CNAME类型就是将域名解析到另一个域名，这里我们coding已经给出一个访问域名了所以我们将其解析到这个域名就是使用CNAME的方式，记录值就是填我们coding给的地址，如果是A解析就填IP。主机记录一般就是写www，如果写www访问的时候就是<a href="http://www.abc.com" target="_blank" rel="noopener">http://www.abc.com</a> 也可以写其他的，如果写@ 就代表空，访问地址是就是<a href="http://aaa.com" target="_blank" rel="noopener">http://aaa.com</a> 。建议添加两个一个是www一个是@</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客从搭建到部署（二）</title>
    <url>/hexo%E5%8D%9A%E5%AE%A2%E4%BB%8E%E6%90%AD%E5%BB%BA%E5%88%B0%E9%83%A8%E7%BD%B2%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="hexo从搭建到部署（二）"><a href="#hexo从搭建到部署（二）" class="headerlink" title="hexo从搭建到部署（二）"></a>hexo从搭建到部署（二）</h1><h2 id="将hexo部署到GitHub"><a href="#将hexo部署到GitHub" class="headerlink" title="将hexo部署到GitHub"></a>将hexo部署到GitHub</h2><h2 id="hexo原理的工作"><a href="#hexo原理的工作" class="headerlink" title="hexo原理的工作"></a>hexo原理的工作</h2><p>下面我们开始介绍如何将你的博客从本地部署到远端的服务器中，说到这里先给大家说一下hexo工作原理，这样能让你更好的理解如何部署而不是只跟着敲命令，敲完功能实现，你还是对你的所做一无所知。</p>
<p><img src= "/img/loading.gif" data-src="5.png" alt="img"></p>
<p>简单通俗的说就是我们安装的hexo生成的那一大堆文件其实就是hexo程序，我们访问的页面来自public文件夹中的静态页面，当我们写好文章或者对主题做了一些新的优化后就使用命令将原来的静态文件清除掉在通过程序生成新的，而服务器就是一个仓库，我们只把静态文件推进仓库里就可以了，因为我们访问的就是文件生成的静态页面。所以我们要和服务器建立连接，然后就可以将本地每次更新的文章重新推进服务器去。</p>
<p>在讲如何将hexo部署到GitHub中之前我先简单的说一下将hexo部署到GitHub中的优缺点，避免你多走弯路，我敢肯定你看完我的介绍你本来计划将hexo部署到GitHub现在有完全没有这种想法了。</p>
<p>第一：将hexo部署到GitHub不用花费一分钱，甚至不用购买域名，因为根据GitHub仓库名命名规则你的博客范文地址是username.github.io这个域名挺好记的可以让人接受。</p>
<p>第二：缺点GitHub是国外服务器，访问速度有点慢，我估计没人喜欢卡来卡去的页面，你如果能接受的了的话那我没话说。</p>
<p>第三：估计你看完这条就放弃将博客部署到GitHub的想法了，GitHub屏蔽了百度SEO爬取，如果你不知道什么是SEO自己去百度一下了解一下，屏蔽了百度SEO爬取就以为的你写的博客是没有办法被百度收录的，也就是说别人无法通过百度搜索在网络上查询到你的博客。</p>
<p>如果你此时已经放弃了将博客部署在GitHub的想法你可以跳过这部分内容，看下面第三部分将博客部署在coding上。</p>
<p>一、准备工作</p>
<p>如果你没有GitHub的账户去注册一个，并绑定邮箱</p>
<p>点击右上角的加号选择新建一个仓库，仓库名填写自己的用户名。注意！！！仓库名必须填写自己的用户名.github.io否则可能导致无法正常访问</p>
<p><img src= "/img/loading.gif" data-src="8.png" alt="img"></p>
<p><img src= "/img/loading.gif" data-src="9.png" alt="img"></p>
<p>建立ssh连接，先配置Git用户，将下面的用户名和邮箱换成自己的（以下命令都在hexo根目录下使用Git bash命令终端执行就可以了）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">"username"</span> </span><br><span class="line">git config --global user.email <span class="string">"username@temp.com"</span></span><br></pre></td></tr></table></figure>

<p>生成公钥，邮箱换成你自己的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"your_email@example.com"</span></span><br></pre></td></tr></table></figure>

<p>生成公钥后在你的C盘目录下C:\Users\你的用户名.ssh  文件夹下生成id_rsa 和 id_rsa.pub 两个文件,以编辑模式打开id_rsa.pub复制里面的内容</p>
<p>回到GitHub页面点击右上角的头像选择settings</p>
<p><img src= "/img/loading.gif" data-src="6.png" alt="img"></p>
<p><img src= "/img/loading.gif" data-src="7.png" alt="img"><br>按图所示添加一个key,将id_ras.pub中的内容粘贴进去</p>
<p>测试ssh连接，在Git终端输入下面的命令测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>成功后会出现欢迎提示语</p>
<p>接下来打开我们打开我们hexo根目录下的配置文件_config.yml定位到deploy（将yourname替换为你的）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: https://github.com/yourname/yourname.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>这一步是hexo博客的自动化部署配置，指定了部署时要将页面文件发布到哪里去上面的地址就是我们的GitHub仓库</p>
<p>安装自动化部署插件，到hexo文件根目录下使用Git终端执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure>

<p>至此我们的配置完全做好了</p>
<p>二、部署</p>
<p>需要用到的几个命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean      //清除缓存静态文件</span><br><span class="line">hexo g          //生成静态文件</span><br><span class="line">hexo d         //将静态页面推到服务器中</span><br></pre></td></tr></table></figure>

<p>我们依次执行完上面的命令后，等待部署完成访问你的<a href="https://yourname.github.io就可以看到你的博客已经被部署在GitHub公网上了。" target="_blank" rel="noopener">https://yourname.github.io就可以看到你的博客已经被部署在GitHub公网上了。</a></p>
<p>当我们写了新的文章或对页面进行了新优化后，先hexo clean清除本地的静态文件,再hexo g生成新的，最后重新推进服务器覆盖就可以了。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客从搭建到部署（四）</title>
    <url>/hexo%E5%8D%9A%E5%AE%A2%E4%BB%8E%E6%90%AD%E5%BB%BA%E5%88%B0%E9%83%A8%E7%BD%B2%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="hexo从搭建到部署（四）"><a href="#hexo从搭建到部署（四）" class="headerlink" title="hexo从搭建到部署（四）"></a>hexo从搭建到部署（四）</h1><h2 id="部署博客到阿里云服务器"><a href="#部署博客到阿里云服务器" class="headerlink" title="部署博客到阿里云服务器"></a>部署博客到阿里云服务器</h2><p>使用阿里云部署自己的博客访问速度快，也能避免像GitHub反SEO爬取的问题，当然花了钱的肯定有花了钱的好处。</p>
<h3 id="一、服务器准备工作"><a href="#一、服务器准备工作" class="headerlink" title="一、服务器准备工作"></a>一、服务器准备工作</h3><p>先去购买阿里云的服务器，这里我就不介绍怎么去购买了，我默认你手已经有一台阿里云的服务器了（CentOSxitong）。</p>
<p>先说一下思路，我们配置防火墙先将需要用的端口打开，在服务器安装一个宝塔面板方便管理，然后通过宝塔安装Nginx服务器，再安装Git环境配置好Git环境和Git用户，使用Git环境在服务器创建仓库并配置本地到服务器的ssh连接，通过本地Git将静态页面推到服务器仓库让后通过Nginx服务器发布就OK了。</p>
<h3 id="二、服务器防火墙设置"><a href="#二、服务器防火墙设置" class="headerlink" title="二、服务器防火墙设置"></a>二、服务器防火墙设置</h3><p>进入到我们的阿里云实例配置安全组</p>
<p><img src= "/img/loading.gif" data-src="1.png" alt="img"></p>
<p><img src= "/img/loading.gif" data-src="2.png" alt="img"></p>
<p>将8888端口和80端口放行，80是我们的Nginx服务器发布网站需要用的，8888是我们的宝塔要用的</p>
<p><img src= "/img/loading.gif" data-src="3.png" alt="img"></p>
<h3 id="二、服务器环境设置"><a href="#二、服务器环境设置" class="headerlink" title="二、服务器环境设置"></a>二、服务器环境设置</h3><p>注意我是用的是centos系统，接下来的所有安装文件操作均为centos命令</p>
<p>1.安装宝塔</p>
<p>连接到我们的服务器</p>
<p><img src= "/img/loading.gif" data-src="4.png" alt="img"></p>
<p><img src= "/img/loading.gif" data-src="5.png" alt="img"></p>
<p>连接成功后在命令行执行安装命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure>

<p>安装完成后会给出以下格式的三行文字,这就是你的宝塔访问地址和用户名密码，通过这个地址登录到宝塔</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Bt-Panel: http://111.111.111.111:8888/9e09xxxx</span><br><span class="line">username: xxxxx</span><br><span class="line">password: xxxxx</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="6.png" alt="img"><br>登录到宝塔后在软件商店安装Nginx服务器并勾选首页显示</p>
<p>2.安装Git配置用户</p>
<p>因为软件商店中没有Git所以我们回到命令终端使用命令安装，并创建Git用户设置用户密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install git</span><br><span class="line">adduser git</span><br><span class="line">sudo passwd git</span><br></pre></td></tr></table></figure>

<p>安装完成后回到宝塔从文件中找到etc下的sudoers文件修改他的权限为740</p>
<p><img src= "/img/loading.gif" data-src="7.png" alt="img"></p>
<p><img src= "/img/loading.gif" data-src="8.png" alt="img"></p>
<p>修改完权限编辑该文件</p>
<p><img src= "/img/loading.gif" data-src="9.png" alt="img"></p>
<p><img src= "/img/loading.gif" data-src="14.png" alt="img"></p>
<p>找到root   ALL=(ALL)   ALL并在下面添加Git，修改完成后保存退出，然后在将权限还原为400</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Allow root to run any commands anywhere </span></span><br><span class="line">root	ALL=(ALL) 	ALL</span><br><span class="line">git     ALL=(ALL)   ALL</span><br></pre></td></tr></table></figure>
<p>3.配置ssh</p>
<p>进入home/git目录下新建一个.ssh目录，并在.ssh目录新建一个文件名为authorized_keys</p>
<p><img src= "/img/loading.gif" data-src="10.png" alt="img"></p>
<p>我们将本地C盘C:\Users\你的用户名.ssh  文件夹下id_rsa.pub 文件中的公钥复制并粘贴到authorized_keys中</p>
<p>本地公钥的创建去GitHub和coding部署中的介绍，上面说了两遍了这里不再啰嗦了。重复一遍在你的C:\Users\你的用户名.ssh 目录下如果已经有公钥文件就说明你以前创建过了，不需要重复创建。复制过来就可以，如果你么有.ssh目录说明你没有创建过公钥文件</p>
<p>设置authorized_keys的权限为600 .ssh文件夹的权限为700</p>
<p>4.测试ssh连接   在本地hexo根目录打开git终端运行下面的命令测试，IP就是你阿里云的公网地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh  git@服务器ip地址</span><br></pre></td></tr></table></figure>

<p>连接成功会给出提示</p>
<p>5.创建Git仓库</p>
<p>回到服务器命令终端，切换到Git用户然后进入根目录创建一个名为hexo的仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su git</span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">git init --bare hexo.git</span><br></pre></td></tr></table></figure>

<p>通过宝塔我们进入/home/git/hexo.git/hooks仓库目录下找到post-receive文件没有就新建一个，先修改权限为775然后编辑输入下面的一行代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git --work-tree=/www/wwwroot/hexo --git-dir=/home/git/hexo.git checkout -f</span><br></pre></td></tr></table></figure>

<p>这句代码的作用是将本地推到服务器的静态文件自动转义到/www/wwwroot/hexo文件夹中，/www/wwwroot/hexo文件夹作为我们发布网站的根目录使用</p>
<p><img src= "/img/loading.gif" data-src="11.png" alt="img"></p>
<p>6.配置web服务器</p>
<p>回到宝塔，选择网站——添加站点</p>
<p>域名填写服务器的公网IP，根目录设为上一步配置中的位置/www/wwwroot/hexo，hexo文件夹需要在wwwroot下自己建一个</p>
<p><img src= "/img/loading.gif" data-src="12.png" alt="img"></p>
<p><img src= "/img/loading.gif" data-src="13.png" alt="img"></p>
<p>注意！！！配置完成后进入/www/wwwroot/hexo目录下将hexo文件夹权限设为777</p>
<h3 id="三、网站发布"><a href="#三、网站发布" class="headerlink" title="三、网站发布"></a>三、网站发布</h3><p>回到本地hexo文件目录将_config.yml中的deploy配置为下面的代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    <span class="built_in">type</span>: git</span><br><span class="line">    repo: git@你的服务器ip:/home/git/hexo.git</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure>
<p>配置完成后本地通过执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean    &#x2F;&#x2F;清除缓存静态文件</span><br><span class="line">hexo g      &#x2F;&#x2F;生成静态文件</span><br><span class="line">hexo d       &#x2F;&#x2F;将静态文件推至服务器</span><br></pre></td></tr></table></figure>

<p>博客静态页面文件就会被保存到服务器/www/wwwroot/hexo/文件夹下</p>
<p>通过IP地址就可以访问到你的博客了</p>
<h3 id="四、域名绑定"><a href="#四、域名绑定" class="headerlink" title="四、域名绑定"></a>四、域名绑定</h3><p>这里我不过多的介绍了，不懂的看第三部分coding部署的结尾有写介绍，我们买了域名后通过A记录解析到公网IP就可以了，但是我们的服务器需要备案申请ICP。</p>
<p>国内的服务器发布网站不通过域名解析是需要备案的，如果绑定了域名通过域名解析需要对服务器进行备案，详细的备案流程在服务器购买的服务商都会有这里不再过多解释。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>win10安装Linux子系统</title>
    <url>/win10%E5%AE%89%E8%A3%85Linux%E5%AD%90%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="0x01-准备"><a href="#0x01-准备" class="headerlink" title="0x01 准备"></a>0x01 准备</h3><h2 id="打开开发者模式"><a href="#打开开发者模式" class="headerlink" title="打开开发者模式"></a>打开开发者模式</h2><p><img src= "/img/loading.gif" data-src="1.png" alt=""><br><img src= "/img/loading.gif" data-src="2.png" alt=""></p>
<h2 id="启用Windows子系统功能"><a href="#启用Windows子系统功能" class="headerlink" title="启用Windows子系统功能"></a>启用Windows子系统功能</h2><p><img src= "/img/loading.gif" data-src="3.png" alt=""><br><img src= "/img/loading.gif" data-src="4.png" alt=""><br><img src= "/img/loading.gif" data-src="5.png" alt=""></p>
<h2 id="安装kali子系统"><a href="#安装kali子系统" class="headerlink" title="安装kali子系统"></a>安装kali子系统</h2><p><img src= "/img/loading.gif" data-src="6.png" alt=""></p>
<h2 id="首次使用配置"><a href="#首次使用配置" class="headerlink" title="首次使用配置"></a>首次使用配置</h2><p><img src= "/img/loading.gif" data-src="7.png" alt=""><br>首次使用等待后按任意键继续<br><img src= "/img/loading.gif" data-src="8.png" alt=""></p>
<h2 id="设置用户名和密码"><a href="#设置用户名和密码" class="headerlink" title="设置用户名和密码"></a>设置用户名和密码</h2><p>设一个用户名和密码<br><img src= "/img/loading.gif" data-src="9.png" alt=""></p>
<h2 id="添加右键菜单"><a href="#添加右键菜单" class="headerlink" title="添加右键菜单"></a>添加右键菜单</h2><p>设置注册表，将下面的代码新建到TXT文本中，将后缀改为.reg双击运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\shell\bash]</span><br><span class="line">@=<span class="string">"在此处打开 Bash "</span></span><br><span class="line"><span class="string">"ShowBasedOnVelocityId"</span>=dword:00639bc8</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\shell\bash\<span class="built_in">command</span>]</span><br><span class="line">@=<span class="string">"bash.exe"</span></span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\background\shell\bash]</span><br><span class="line">@=<span class="string">"在此处打开 Bash "</span></span><br><span class="line"><span class="string">"ShowBasedOnVelocityId"</span>=dword:00639bc8</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\background\shell\bash\<span class="built_in">command</span>]</span><br><span class="line">@=<span class="string">"bash.exe"</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-src="10.png" alt=""><br>添加成功</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>kali</tag>
      </tags>
  </entry>
</search>
